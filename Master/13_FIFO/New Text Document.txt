module fifo( clk, rst, wr_en, full, wdata, wr_err, rd_en, empty, rdata, rd_err);

parameter WIDTH=8;
parameter DEPTH=16;
parameter PTR_WIDTH=4;

input clk, rst, wr_en, rd_en;
input [WIDTH-1:0]wdata;
output reg full, empty, wr_err, rd_err;
output reg [WIDTH-1:0]rdata;
reg [WIDTH-1:0] mem [DEPTH-1:0];
reg [PTR_WIDTH-1:0]wr_ptr, rd_ptr;
reg wr_f, rd_f;
integer i;

always@(posedge clk)begin
	if(rst)begin
		wr_ptr=0;
		rd_ptr=0;
		full=0;
		empty=1;
		wr_err=0;
		rd_err=0;
		wr_f=0;
		rd_f=0;
		rdata=0;
		for(i=0; i<DEPTH; i=i+1)begin
          mem[i]=0;
		end
	end
		//WRITE AND READ OPERATIONS
		else begin
          wr_err=0;
			if(wr_en)begin
				if(!full)begin
					mem[wr_ptr]=wdata;
					if(wr_ptr==DEPTH-1)begin
						wr_f=~wr_f;
					end
					//else wr_f=0;
					wr_ptr=wr_ptr+1;
				end
				else begin
					wr_err=1;
				end
			end
		end
end

always@(posedge clk)begin
	if(!rst)begin
      rd_err=0;
		if(rd_en)begin
			if(!empty)begin
				rdata=mem[rd_ptr];
				if(rd_ptr==DEPTH-1)begin
					rd_f=~rd_f;
				end
				//else rd_f=0;
				rd_ptr=rd_ptr+1;
			end
			else begin
				rd_err=1;
			end
		end
	end
end



always@(wr_ptr or rd_ptr)begin
	full=0;
	empty=0;
	if(wr_ptr==rd_ptr)begin
		if(wr_f==rd_f)begin
			empty=1;
			full=0;
		end
		else begin
			full=1;
			empty=0;
		end
	end
end





endmodule
